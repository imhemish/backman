#!/usr/bin/env python3
# Author: Hemish (hemish04082005@gmail.com)
from subprocess import Popen as pp # For running shell commands
import subprocess # Shell commands
from os import mkdir # For creating directories if don't exist
from os.path import exists # To check if required files exist
from os.path import join as joinp
from toml import load, dump # To save and load configuration
from os.path import expanduser as exp # To refer user folders as "~"
import os
from argparse import ArgumentParser as argvp # Command line arguement parsing
import sys
from functools import reduce


# Some utility functions for paths
def _(path): # Refer in form of unix paths, and convert to windows one if using Windows, and also replace ~ by the home dir
    return exp(str(reduce(joinp, path.split("/"))))

def create_dir_if_not_exists(path):
	if os.path.exists(str(path)) == False:
		os.mkdir(str(path))
	else:
		pass


# Template configuration to dump if configuration doesn't exist
template_config = {
        "mode": "random", # Other modes: bing, unsplash, fixed
        "directories": ["/usr/share/backman",],
        "fix_bg": "/usr/share/backman/fix_bg.png",
        "wal_opts": ["",],
        "prev_bg": "/usr/share/backman/fix_bg.png"
        }

# If platform is Windows, then use Pictures directory
if sys.platform == "win32":
    template_config["directories"] = [_("~/Pictures/")]

# Warning of errors, piped to STDERR
def warn(message):
    sys.stderr.write("Warning: {} \n".format(message))

# Dump configs if dont exist
def check_configs(template_config):
    if not exists(_("~/.config/backman.toml")):
        warn("Configuration does not exist. Dumping default configuration. Edit as required.")
        filenew = open(exp("~/.config/backman.toml"), "a")
        dump(template_config, filenew)
        filenew.close()

# Reading Configs
def read_configs():
    try:
        return load(_("~/.config/backman.toml"))
    except:
        warn("Configuration could not be read correctly. Using default values")
        return template_config

# Save configuration as specified in provided dictionary
def save_configs(config_dict):
    try:
        filenew = open(_("~/.config/backman.toml"), "w")
        dump(config_dict, filenew)
        filenew.close()
    except Exception as e:
        warn("Exception occured in saving configuration")
        warn("The exception was: {}".format(e))
        exit()

# Get all files under folder and subfolders
def get_list_of_files(dirName):
    if exists(dirName):
    # create a list of file and sub directories 
    # names in the given directory 
        listOfFile = os.listdir(dirName)
        allFiles = list()
    # Iterate over all the entries
        for entry in listOfFile:
        # Create full path
            fullPath = os.path.join(dirName, entry)
        # If entry is a directory then get the list of files in this directory 
            if os.path.isdir(fullPath):
                allFiles = allFiles + getListOfFiles(fullPath)
            else:
                allFiles.append(fullPath)
    else:
        warn("The directory '{}' does not exist.".format(dirName))
        return []
    return allFiles        

# Check if a file is supported image or not
def is_image(filepath):
    exts = ["png", "jpg", "jpeg"]
    for item in exts:
        if filepath.endswith("."+item):
            return True

# Pick random image from specified directories
def pick_random(directories_list):
    from random import choice

    if len(directories_list) == 0:
        warn("No directories specified. Exiting...")
        exit()

    imgs_list = []
    for item in directories_list:
        if exists(item) and item != 0:
            imgs = list(filter(is_image, get_list_of_files(item)))
            imgs_list = imgs_list + imgs
        else:
            warn("Directory does not exist: '{}'".format(item))

    if len(imgs_list) == 0:
        warn("No image detected. Exiting...")
        exit()

    return choice(imgs_list)

# Execute a shell command in background and send STDOUT and STDERR to /dev/null
def cmd(cmd_list):
    pp(cmd_list, close_fds=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

# Change to mode specified
def change_mode(mode):
    if str(mode) in ["fixed", "random"]:
        config = read_configs()
        config["mode"] = mode
        save_configs(config)

# Set the path of fix background image in configuration
def set_fix_bg(path):
    if exists(path):
        config = read_configs()
        config["fix_bg"] = path
        save_configs(config)

# Add directory to configuration
def add_directory(path):
    if exists(str(path)):
        config = read_configs()
        config["directories"] = config["directories"] + [str(path),]
        save_configs(config)

# Remove directory from configuration
def remove_directory(path):
    config = read_configs()
    if str(path) in config["directories"]:
        list_directories = config["directories"]
        list_directories.remove(str(path))
        config["directories"] = list_directories
        save_configs(config)

# Set background in Windows
def set_windows_bg(path):
    import ctypes
    uiAction = 20  # SPI_SETDESKWALLPAPER = 0x0014 or 20 in decimal
    uiParam = 0
    pvParam = path
    fWinIni = 0
    success = ctypes.windll.user32.SystemParametersInfoW(uiAction, uiParam, pvParam, fWinIni)
    if not success:
        warn("Some error occured while setting windows background")

# Set background accordingly to the platform
def set_bg(path):
    configs = read_configs()
    configs["prev_bg"] = path
    save_configs(configs)

    if sys.platform == "win32":
        set_windows_bg(path)
    elif "linux" in sys.platform:
        try: # Getting the current desktop if such env variable is set
            xdg_cd = os.environ["XDG_CURRENT_DESKTOP"]
        except:
            try: # Getting current session as launched by display manager (e.g. GDM, LightDM) (if set in env var)
                xdg_cd = os.environ["XDG_SESSION_DESKTOP"]
            except:
                xdg_cd = "dummy"
        try: # Check if it is wayland or x11 session
            xdg_ses = os.environ["XDG_SESSION_TYPE"]
        except:
            xdg_ses = "dummy"
        if "gnome" in xdg_cd.lower():
            cmd(["gsettings", "set", "org.gnome.desktop.background", "picture-uri", "file://{}".format(path)])
        elif "cinnamon" in xdg_cd.lower():
            cmd(["gsettings", "set", "org.cinnamon.desktop.background", "picture-uri", "file://{}".format(path)])
        elif "xfce" in xdg_cd.lower(): # The script exists at /usr/share/backman/set_xfce which takes "pathn" as env var
            os.system("pathn={} /usr/share/backman/set_xfce".format(path))
        elif "sway" in xdg_cd.lower():
            os.system("pkill swaybg") # Kill any running swaybg process, otherwise background wouldn't be set
            cmd(["swaybg", "-i", path])
        elif xdg_ses.lower() == "wayland":
            warn("Wayland detected but not sway. Using swaybg...")
            os.system("pkill swaybg")
            cmd(["swaybg", "-i", path])
        elif xdg_ses.lower() == "x11": # Use hsetroot if any desktop is not detected in Xorg session
            cmd(["hsetroot", "-fill", path])
        elif xdg_ses.lower() == "tty": # Happens when you launch a standalone window manager, which don't set XDG_SESSION_TYPE var
            warn("Either graphical session is not running or appropriate XDG_SESSION_TYPE variable is not set")
            warn("Using hsetroot in tty environment")
            cmd(["hsetroot", "-fill", path])
        else:
            warn("Platform not supported")

def is_wal_present(): # Check if wall binary is present
    if exists(_("/usr/bin/wal")):
        return True
    elif exists(_("/usr/local/bin/wal")):
        return True
    elif exists(_("~/.local/bin/wal")):
        return True
    else:
        return False

def wal(img): 
    config = read_configs()
    if is_wal_present():
        try:
            opts = config["wal_opts"] # getting additional wal options from config
        except:
            opts = ["",]
        command = ["wal", "-i", img, "-n"] # -n flag instructs to not set background as this script already does that
        opts_new = []
        for item in opts:
            if item == "":
                continue
            else:
                opts_new.append(item)
        command = command + opts_new # Additional wal options as specified in configuration
        cmd(command)
    else:
        warn("Wal not present, skipping wal")

def list_dirs():
    config = read_configs()
    list_directories = config["directories"]
    for item in list_directories:
        print(item)

def return_img_to_set():
    config = read_configs()
    if config["mode"] == "fixed":
        return config["fix_bg"]
    elif config["mode"] == "random":
        return pick_random(config["directories"])

def main():
    # Adding arguements to parser
    ap = argvp(description="Backman is a random/fixed background image setter for major GTK desktops, X11, sway and other wlroots based wayland compositors")
    ap.add_argument("--previous", "-p", action="store_true", required=False, help="Use previous background image in set/return method instead of choosing random")
    ap.add_argument("--set", "-s", action="store_true", required=False, help="Set the background, either random or fixed (as specified in configuration)")
    ap.add_argument("--return-path", "-r", action="store_true", required=False, help="Return the path of background that would be set, either random or fixed")
    ap.add_argument("--wal", "-w", action="store_true", required=False, help="Use wal to generate color schemes using returned/set background")
    ap.add_argument("--change-mode", "-m", required=False, nargs=1, help="Change mode to specified as arguement", metavar="mode")
    ap.add_argument("--set-fix-bg", "-f", required=False, nargs=1, help="Set fixed background image in configuration", metavar="/path/to/file")
    ap.add_argument("--add-dir", required=False, nargs=1, help="Add a directory to configuration", metavar="path/to/directory")
    ap.add_argument("--rm-dir", required=False, nargs=1, help="Remove a directory from configuration", metavar="path/to/directory")
    ap.add_argument("--list-dirs", "-l", action="store_true", required=False, help="List directories specified in configuration")
    ap.add_argument("--set-temporary", "-i", required=False, nargs=1, help="Set temporary background disregarding any configuration", metavar="/path/to/file")
    args = ap.parse_args()

    # Checking if configuration exists. If doesn't exist, then dump the template_config
    check_configs(template_config)
    configs= read_configs()

    if args.set_temporary != None:
        to_set = args.set_temporary[0]
        if exists(to_set):
            set_bg(to_set)
        else:
            warn("Specified image path does not exist. Skipping...")


    if args.change_mode != None:
        change_mode(args.change_mode[0])
    if args.set_fix_bg != None:
        set_fix_bg(args.set_fix_bg[0])
    if args.add_dir != None:
        add_directory(args.add_dir[0])
    if args.rm_dir != None:
        remove_directory(args.rm_dir[0])
    


    if args.previous:
        try:
            to_return = configs["prev_bg"]
        except:
            warn("Some error occured while fetching previously set image. Generating new...")
            to_return = return_img_to_set()
    else:
        to_return = return_img_to_set()
    
    if args.return_path:
        print(to_return)
    if args.set:
        set_bg(to_return)
    if args.wal:
        wal(to_return)



    if args.list_dirs:
        list_dirs()
    exit()



if __name__ == "__main__":
    main()
